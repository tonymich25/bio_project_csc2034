C:\Users\mtony\AppData\Local\Programs\Python\Python39\python.exe C:\Users\mtony\PycharmProjects\bio_project_csc2034\run.py -t 5 --generations=1000 darwin.png
2025-04-22 00:25:28,5,2600,0.795,0.844
2025-04-22 00:25:30,10,5100,0.778,0.87
2025-04-22 00:25:32,15,7600,0.83,0.879
2025-04-22 00:25:34,20,10100,0.848,0.891
2025-04-22 00:25:35,25,12600,0.885,0.903
2025-04-22 00:25:37,30,15100,0.893,0.908
2025-04-22 00:25:38,35,17600,0.853,0.912
2025-04-22 00:25:40,40,20100,0.882,0.915
2025-04-22 00:25:42,45,22600,0.88,0.919
2025-04-22 00:25:43,50,25100,0.901,0.921
2025-04-22 00:25:45,55,27600,0.881,0.923
2025-04-22 00:25:46,60,30100,0.908,0.924
2025-04-22 00:25:48,65,32600,0.911,0.924
2025-04-22 00:25:49,70,35100,0.891,0.925
2025-04-22 00:25:51,75,37600,0.893,0.925
2025-04-22 00:25:52,80,40100,0.88,0.926
2025-04-22 00:25:54,85,42600,0.832,0.927
2025-04-22 00:25:56,90,45100,0.901,0.927
2025-04-22 00:25:57,95,47600,0.898,0.927
2025-04-22 00:26:00,100,50100,0.778,0.929
2025-04-22 00:26:02,105,52600,0.888,0.93
2025-04-22 00:26:04,110,55100,0.884,0.93
2025-04-22 00:26:06,115,57600,0.829,0.93
2025-04-22 00:26:08,120,60100,0.913,0.93
2025-04-22 00:26:10,125,62600,0.91,0.93
2025-04-22 00:26:11,130,65100,0.896,0.931
2025-04-22 00:26:13,135,67600,0.774,0.931
2025-04-22 00:26:14,140,70100,0.925,0.931
2025-04-22 00:26:16,145,72600,0.886,0.931
2025-04-22 00:26:17,150,75100,0.828,0.934
2025-04-22 00:26:19,155,77600,0.609,0.934
2025-04-22 00:26:21,160,80100,0.897,0.934
2025-04-22 00:26:22,165,82600,0.882,0.935
2025-04-22 00:26:24,170,85100,0.914,0.935
2025-04-22 00:26:25,175,87600,0.803,0.935
2025-04-22 00:26:27,180,90100,0.842,0.935
2025-04-22 00:26:28,185,92600,0.864,0.935
2025-04-22 00:26:30,190,95100,0.927,0.935
2025-04-22 00:26:32,195,97600,0.897,0.935
2025-04-22 00:26:35,200,100100,0.884,0.936
2025-04-22 00:26:37,205,102600,0.875,0.936
2025-04-22 00:26:40,210,105100,0.928,0.936
2025-04-22 00:26:42,215,107600,0.881,0.936
2025-04-22 00:26:43,220,110100,0.92,0.937
2025-04-22 00:26:45,225,112600,0.916,0.938
2025-04-22 00:26:47,230,115100,0.91,0.938
2025-04-22 00:26:48,235,117600,0.929,0.938
2025-04-22 00:26:50,240,120100,0.919,0.938
2025-04-22 00:26:51,245,122600,0.882,0.938
2025-04-22 00:26:53,250,125100,0.924,0.938
2025-04-22 00:26:55,255,127600,0.925,0.938
2025-04-22 00:26:56,260,130100,0.914,0.939
2025-04-22 00:26:58,265,132600,0.923,0.939
2025-04-22 00:27:00,270,135100,0.864,0.939
2025-04-22 00:27:01,275,137600,0.887,0.939
2025-04-22 00:27:03,280,140100,0.884,0.939
2025-04-22 00:27:04,285,142600,0.835,0.939
2025-04-22 00:27:06,290,145100,0.917,0.939
2025-04-22 00:27:08,295,147600,0.893,0.939
2025-04-22 00:27:09,300,150100,0.919,0.939
2025-04-22 00:27:12,305,152600,0.905,0.939
2025-04-22 00:27:14,310,155100,0.925,0.939
2025-04-22 00:27:16,315,157600,0.841,0.94
2025-04-22 00:27:18,320,160100,0.898,0.94
2025-04-22 00:27:19,325,162600,0.927,0.94
2025-04-22 00:27:21,330,165100,0.927,0.94
2025-04-22 00:27:23,335,167600,0.801,0.94
2025-04-22 00:27:24,340,170100,0.919,0.94
2025-04-22 00:27:26,345,172600,0.922,0.94
2025-04-22 00:27:27,350,175100,0.914,0.94
2025-04-22 00:27:29,355,177600,0.918,0.94
2025-04-22 00:27:31,360,180100,0.879,0.94
2025-04-22 00:27:32,365,182600,0.927,0.94
2025-04-22 00:27:34,370,185100,0.891,0.94
2025-04-22 00:27:35,375,187600,0.907,0.94
2025-04-22 00:27:37,380,190100,0.871,0.941
2025-04-22 00:27:39,385,192600,0.931,0.941
2025-04-22 00:27:40,390,195100,0.889,0.941
2025-04-22 00:27:42,395,197600,0.923,0.941
2025-04-22 00:27:43,400,200100,0.903,0.941
2025-04-22 00:27:45,405,202600,0.929,0.943
2025-04-22 00:27:46,410,205100,0.923,0.943
2025-04-22 00:27:48,415,207600,0.889,0.944
2025-04-22 00:27:49,420,210100,0.904,0.944
2025-04-22 00:27:51,425,212600,0.864,0.944
2025-04-22 00:27:52,430,215100,0.822,0.944
2025-04-22 00:27:54,435,217600,0.814,0.944
2025-04-22 00:27:55,440,220100,0.877,0.944
2025-04-22 00:27:57,445,222600,0.866,0.945
2025-04-22 00:27:59,450,225100,0.889,0.945
2025-04-22 00:28:00,455,227600,0.911,0.945
2025-04-22 00:28:02,460,230100,0.927,0.945
2025-04-22 00:28:03,465,232600,0.916,0.945
2025-04-22 00:28:05,470,235100,0.918,0.946
2025-04-22 00:28:06,475,237600,0.925,0.946
2025-04-22 00:28:08,480,240100,0.87,0.946
2025-04-22 00:28:09,485,242600,0.9,0.946
2025-04-22 00:28:11,490,245100,0.92,0.946
2025-04-22 00:28:12,495,247600,0.927,0.946
2025-04-22 00:28:14,500,250100,0.914,0.946
2025-04-22 00:28:16,505,252600,0.912,0.946
2025-04-22 00:28:17,510,255100,0.929,0.946
2025-04-22 00:28:19,515,257600,0.89,0.946
2025-04-22 00:28:20,520,260100,0.921,0.946
2025-04-22 00:28:22,525,262600,0.908,0.946
2025-04-22 00:28:23,530,265100,0.913,0.947
2025-04-22 00:28:25,535,267600,0.924,0.947
2025-04-22 00:28:27,540,270100,0.919,0.947
2025-04-22 00:28:28,545,272600,0.921,0.947
2025-04-22 00:28:30,550,275100,0.94,0.947
2025-04-22 00:28:31,555,277600,0.896,0.948
2025-04-22 00:28:33,560,280100,0.928,0.948
2025-04-22 00:28:35,565,282600,0.883,0.948
2025-04-22 00:28:36,570,285100,0.904,0.948
2025-04-22 00:28:38,575,287600,0.909,0.948
2025-04-22 00:28:39,580,290100,0.887,0.948
2025-04-22 00:28:41,585,292600,0.914,0.948
2025-04-22 00:28:43,590,295100,0.919,0.948
2025-04-22 00:28:44,595,297600,0.928,0.948
2025-04-22 00:28:46,600,300100,0.914,0.949
2025-04-22 00:28:47,605,302600,0.934,0.949
2025-04-22 00:28:49,610,305100,0.936,0.949
2025-04-22 00:28:50,615,307600,0.895,0.949
2025-04-22 00:28:52,620,310100,0.906,0.949
2025-04-22 00:28:54,625,312600,0.877,0.95
2025-04-22 00:28:55,630,315100,0.878,0.95
2025-04-22 00:28:57,635,317600,0.943,0.95
2025-04-22 00:28:58,640,320100,0.92,0.95
2025-04-22 00:29:00,645,322600,0.931,0.95
2025-04-22 00:29:02,650,325100,0.915,0.95
2025-04-22 00:29:03,655,327600,0.898,0.95
2025-04-22 00:29:05,660,330100,0.897,0.95
2025-04-22 00:29:06,665,332600,0.905,0.95
2025-04-22 00:29:08,670,335100,0.889,0.95
2025-04-22 00:29:10,675,337600,0.868,0.951
2025-04-22 00:29:11,680,340100,0.882,0.951
2025-04-22 00:29:13,685,342600,0.9,0.951
2025-04-22 00:29:15,690,345100,0.915,0.951
2025-04-22 00:29:17,695,347600,0.914,0.951
2025-04-22 00:29:20,700,350100,0.923,0.951
2025-04-22 00:29:22,705,352600,0.822,0.951
2025-04-22 00:29:25,710,355100,0.93,0.951
2025-04-22 00:29:27,715,357600,0.935,0.951
2025-04-22 00:29:29,720,360100,0.907,0.951
2025-04-22 00:29:32,725,362600,0.9,0.951
2025-04-22 00:29:34,730,365100,0.876,0.951
2025-04-22 00:29:36,735,367600,0.906,0.951
2025-04-22 00:29:39,740,370100,0.879,0.951
2025-04-22 00:29:41,745,372600,0.932,0.951
2025-04-22 00:29:43,750,375100,0.933,0.951
2025-04-22 00:29:46,755,377600,0.915,0.951
2025-04-22 00:29:48,760,380100,0.905,0.951
2025-04-22 00:29:50,765,382600,0.926,0.951
2025-04-22 00:29:52,770,385100,0.928,0.951
2025-04-22 00:29:55,775,387600,0.908,0.951
2025-04-22 00:29:57,780,390100,0.916,0.951
2025-04-22 00:29:59,785,392600,0.921,0.951
2025-04-22 00:30:02,790,395100,0.918,0.951
2025-04-22 00:30:04,795,397600,0.919,0.951
2025-04-22 00:30:06,800,400100,0.881,0.951
2025-04-22 00:30:09,805,402600,0.901,0.951
2025-04-22 00:30:11,810,405100,0.941,0.951
2025-04-22 00:30:14,815,407600,0.899,0.951
2025-04-22 00:30:17,820,410100,0.885,0.951
2025-04-22 00:30:19,825,412600,0.922,0.951
2025-04-22 00:30:21,830,415100,0.92,0.951
2025-04-22 00:30:24,835,417600,0.893,0.951
2025-04-22 00:30:27,840,420100,0.925,0.951
2025-04-22 00:30:29,845,422600,0.919,0.951
2025-04-22 00:30:32,850,425100,0.898,0.951
2025-04-22 00:30:33,855,427600,0.937,0.951
2025-04-22 00:30:36,860,430100,0.902,0.951
2025-04-22 00:30:39,865,432600,0.916,0.951
2025-04-22 00:30:41,870,435100,0.944,0.951
2025-04-22 00:30:43,875,437600,0.919,0.951
2025-04-22 00:30:45,880,440100,0.892,0.951
2025-04-22 00:30:47,885,442600,0.927,0.951
2025-04-22 00:30:50,890,445100,0.851,0.951
2025-04-22 00:30:52,895,447600,0.914,0.951
2025-04-22 00:30:54,900,450100,0.918,0.951
2025-04-22 00:30:56,905,452600,0.939,0.951
2025-04-22 00:30:57,910,455100,0.885,0.951
2025-04-22 00:30:59,915,457600,0.904,0.951
2025-04-22 00:31:01,920,460100,0.939,0.951
2025-04-22 00:31:04,925,462600,0.78,0.951
2025-04-22 00:31:07,930,465100,0.857,0.951
2025-04-22 00:31:09,935,467600,0.927,0.951
2025-04-22 00:31:11,940,470100,0.935,0.951
2025-04-22 00:31:13,945,472600,0.878,0.951
2025-04-22 00:31:15,950,475100,0.858,0.951
2025-04-22 00:31:16,955,477600,0.925,0.951
2025-04-22 00:31:18,960,480100,0.938,0.951
2025-04-22 00:31:20,965,482600,0.92,0.951
2025-04-22 00:31:21,970,485100,0.864,0.951
2025-04-22 00:31:23,975,487600,0.911,0.951
2025-04-22 00:31:25,980,490100,0.904,0.952
2025-04-22 00:31:27,985,492600,0.866,0.952
2025-04-22 00:31:28,990,495100,0.927,0.952
2025-04-22 00:31:30,995,497600,0.936,0.952
2025-04-22 00:31:32,1000,500100,0.823,0.952

Process finished with exit code 0


import random

from evol import Population
from PIL import Image, ImageDraw, ImageChops
from random import randint

POLYGON_COUNT=100
SIDES=3
MIN_SIDES = 3
MAX_SIDES = 6
#print(SIDES)

SHAPES = 100
MAX = 255 * 200 * 200
TARGET = Image.open("8a.png")
TARGET.load()


def get_random_pixel_color():
    x = randint(0, TARGET.width - 1)
    y = randint(0, TARGET.height - 1)

    return TARGET.getpixel((x, y))

def get_alpha():
    r = random.random()
    if r < 0.3:
        return randint(30, 100)
    elif r < 0.8:
        return randint(100, 200)
    else:
        return 255

def make_polygon():
    sides = randint(MIN_SIDES, MAX_SIDES)
    points = []

    # Create shape at the edge of the canvas
    if random.random() < 0.02:
        for _ in range(sides):
            points.append(0 if random.random() < 0.5 else 199)
            points.append(0 if random.random() < 0.5 else 199)

    # Create random
    for _ in range(sides):
        points.append(randint(0, 199))
        points.append(randint(0, 199))



    if random.random() < 0.7:
        color = list(get_random_pixel_color()[:3])
        color.append(255)


    else:
        base_color = get_random_pixel_color()
        color = [max(0, min(255, base + randint(-20, 20))) for base in base_color[:3]]
        color.append(get_alpha())



    return [tuple(points), tuple(color)]

##
def initialise():
    return [make_polygon() for i in range(POLYGON_COUNT)]

##
def draw(solution):
    """Always returns RGB image for compatibility, but preserves alpha during drawing"""
    # Create RGBA canvas with white background
    image = Image.new("RGBA", (200, 200), (255, 255, 255, 255))
    canvas = ImageDraw.Draw(image)

    # Draw polygons with proper z-ordering
    for polygon in sorted(solution, key=lambda x: x[1][3] if len(x[1]) > 3 else 255):
        canvas.polygon(polygon[0], fill=polygon[1])

    # Composite onto white background and convert to RGB
    return image.convert("RGB")


def evolve(population, args):
    for i in range(5):
        population.survive(fraction=0.1)
        population.breed(parent_picker=fit_selection , combiner=combine)
        population.mutate(mutate_function=mutate, rate=0.2)
    return population


##
# Original - Random Selection
def select(population):
    mom = random.choice(population)
    print(mom.fitness)

    dad = random.choice(population)
    return mom, dad


def fit_selection(population):

    ten_parents = random.sample(population, 10)
    # Sort based on fitness
    ten_parents.sort(key=lambda fit_filter: fit_filter.fitness)
    #print(ten_parents[8], ten_parents[9])
    return ten_parents[8], ten_parents[9]


def combine(mom, dad):
    # 70% multi-point crossover, 30% uniform crossover
    if random.random() < 0.7:
        splits = sorted(random.sample(range(min(len(mom), len(dad))), 2))
        return mom[:splits[0]] + dad[splits[0]:splits[1]] + mom[splits[1]:]
    else:
        return [random.choice(pair) for pair in zip(mom, dad)]



def mutate(chromosome, rate):
    # 1. Focus only on these key mutation types
    mutation_type = random.choice([
        'modify_coords',
        'modify_color',
        'add_polygon',
        'remove_polygon'
    ])

    # Work on a copy
    mutated = list(chromosome)

    # 2. Targeted coordinate mutation
    if mutation_type == 'modify_coords' and mutated:
        idx = random.randrange(len(mutated))
        coords, color = mutated[idx]
        mutated[idx] = (
            tuple(
                max(0, min(199, c + int(random.gauss(0, 10))))
                for c in coords
            ),
            color
        )

    # 3. Targeted color mutation
    elif mutation_type == 'modify_color' and mutated:
        idx = random.randrange(len(mutated))
        coords, color = mutated[idx]
        mutated[idx] = (
            coords,
            tuple(
                max(0, min(255, c + int(random.gauss(0, 25))))
                if i < 3 else c  # Don't mutate alpha
                for i, c in enumerate(color)
            )
        )

    # 4. Structural changes
    elif mutation_type == 'add_polygon' and len(mutated) < POLYGON_COUNT * 1.5:
        mutated.insert(random.randrange(len(mutated) + 1), make_polygon())

    elif mutation_type == 'remove_polygon' and len(mutated) > POLYGON_COUNT // 2:
        mutated.pop(random.randrange(len(mutated)))

    return mutated