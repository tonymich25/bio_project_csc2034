C:\Users\mtony\AppData\Local\Programs\Python\Python39\python.exe C:\Users\mtony\PycharmProjects\bio_project_csc2034\run.py -t 5 --generations=1000 darwin.png
2025-04-21 23:08:17,5,2600,0.789,0.852
2025-04-21 23:08:20,10,5100,0.802,0.875
2025-04-21 23:08:23,15,7600,0.763,0.893
2025-04-21 23:08:25,20,10100,0.897,0.908
2025-04-21 23:08:28,25,12600,0.874,0.917
2025-04-21 23:08:30,30,15100,0.888,0.928
2025-04-21 23:08:33,35,17600,0.897,0.932
2025-04-21 23:08:36,40,20100,0.917,0.935
2025-04-21 23:08:39,45,22600,0.908,0.938
2025-04-21 23:08:44,50,25100,0.925,0.939
2025-04-21 23:08:49,55,27600,0.912,0.939
2025-04-21 23:08:54,60,30100,0.845,0.939
2025-04-21 23:08:59,65,32600,0.887,0.941
2025-04-21 23:09:03,70,35100,0.896,0.941
2025-04-21 23:09:06,75,37600,0.836,0.942
2025-04-21 23:09:10,80,40100,0.887,0.942
2025-04-21 23:09:12,85,42600,0.801,0.943
2025-04-21 23:09:15,90,45100,0.926,0.943
2025-04-21 23:09:18,95,47600,0.931,0.943
2025-04-21 23:09:21,100,50100,0.817,0.944
2025-04-21 23:09:24,105,52600,0.915,0.944
2025-04-21 23:09:26,110,55100,0.885,0.944
2025-04-21 23:09:29,115,57600,0.907,0.944
2025-04-21 23:09:32,120,60100,0.914,0.944
2025-04-21 23:09:34,125,62600,0.917,0.944
2025-04-21 23:09:37,130,65100,0.902,0.944
2025-04-21 23:09:40,135,67600,0.898,0.945
2025-04-21 23:09:42,140,70100,0.92,0.945
2025-04-21 23:09:45,145,72600,0.899,0.945
2025-04-21 23:09:48,150,75100,0.932,0.945
2025-04-21 23:09:51,155,77600,0.91,0.945
2025-04-21 23:09:54,160,80100,0.827,0.945
2025-04-21 23:09:57,165,82600,0.894,0.945
2025-04-21 23:10:00,170,85100,0.852,0.946
2025-04-21 23:10:03,175,87600,0.89,0.946
2025-04-21 23:10:06,180,90100,0.858,0.946
2025-04-21 23:10:10,185,92600,0.918,0.946
2025-04-21 23:10:13,190,95100,0.884,0.946
2025-04-21 23:10:16,195,97600,0.936,0.946
2025-04-21 23:10:19,200,100100,0.934,0.946
2025-04-21 23:10:22,205,102600,0.902,0.946
2025-04-21 23:10:26,210,105100,0.745,0.946
2025-04-21 23:10:29,215,107600,0.888,0.946
2025-04-21 23:10:32,220,110100,0.829,0.947
2025-04-21 23:10:35,225,112600,0.937,0.947
2025-04-21 23:10:38,230,115100,0.915,0.948
2025-04-21 23:10:42,235,117600,0.879,0.948
2025-04-21 23:10:45,240,120100,0.924,0.948
2025-04-21 23:10:48,245,122600,0.933,0.948
2025-04-21 23:10:52,250,125100,0.889,0.948
2025-04-21 23:10:55,255,127600,0.934,0.948
2025-04-21 23:10:58,260,130100,0.905,0.948
2025-04-21 23:11:01,265,132600,0.925,0.948
2025-04-21 23:11:05,270,135100,0.719,0.948
2025-04-21 23:11:08,275,137600,0.883,0.948
2025-04-21 23:11:11,280,140100,0.91,0.948
2025-04-21 23:11:14,285,142600,0.908,0.949
2025-04-21 23:11:18,290,145100,0.905,0.949
2025-04-21 23:11:21,295,147600,0.918,0.949
2025-04-21 23:11:24,300,150100,0.897,0.949
2025-04-21 23:11:27,305,152600,0.892,0.949
2025-04-21 23:11:32,310,155100,0.907,0.949
2025-04-21 23:11:36,315,157600,0.891,0.949
2025-04-21 23:11:40,320,160100,0.913,0.949
2025-04-21 23:11:45,325,162600,0.919,0.95
2025-04-21 23:11:49,330,165100,0.884,0.95
2025-04-21 23:11:53,335,167600,0.919,0.95
2025-04-21 23:11:58,340,170100,0.929,0.95
2025-04-21 23:12:03,345,172600,0.9,0.95
2025-04-21 23:12:08,350,175100,0.932,0.95
2025-04-21 23:12:12,355,177600,0.815,0.95
2025-04-21 23:12:17,360,180100,0.894,0.95
2025-04-21 23:12:22,365,182600,0.927,0.95
2025-04-21 23:12:27,370,185100,0.924,0.95
2025-04-21 23:12:31,375,187600,0.898,0.95
2025-04-21 23:12:36,380,190100,0.824,0.95
2025-04-21 23:12:40,385,192600,0.933,0.95
2025-04-21 23:12:45,390,195100,0.899,0.951
2025-04-21 23:12:51,395,197600,0.902,0.951
2025-04-21 23:12:55,400,200100,0.917,0.951
2025-04-21 23:13:00,405,202600,0.929,0.951
2025-04-21 23:13:04,410,205100,0.905,0.951
2025-04-21 23:13:09,415,207600,0.925,0.951
2025-04-21 23:13:14,420,210100,0.907,0.951
2025-04-21 23:13:19,425,212600,0.917,0.951
2025-04-21 23:13:24,430,215100,0.9,0.951
2025-04-21 23:13:28,435,217600,0.802,0.951
2025-04-21 23:13:33,440,220100,0.931,0.951
2025-04-21 23:13:38,445,222600,0.924,0.951
2025-04-21 23:13:43,450,225100,0.867,0.951
2025-04-21 23:13:47,455,227600,0.919,0.952
2025-04-21 23:13:50,460,230100,0.926,0.952
2025-04-21 23:13:53,465,232600,0.933,0.952
2025-04-21 23:13:56,470,235100,0.904,0.952
2025-04-21 23:13:58,475,237600,0.934,0.952
2025-04-21 23:14:01,480,240100,0.907,0.952
2025-04-21 23:14:03,485,242600,0.923,0.952
2025-04-21 23:14:06,490,245100,0.827,0.953
2025-04-21 23:14:08,495,247600,0.925,0.953
2025-04-21 23:14:11,500,250100,0.935,0.953
2025-04-21 23:14:13,505,252600,0.889,0.953
2025-04-21 23:14:16,510,255100,0.932,0.953
2025-04-21 23:14:18,515,257600,0.947,0.953
2025-04-21 23:14:21,520,260100,0.933,0.953
2025-04-21 23:14:23,525,262600,0.924,0.953
2025-04-21 23:14:26,530,265100,0.91,0.953
2025-04-21 23:14:28,535,267600,0.931,0.953
2025-04-21 23:14:31,540,270100,0.938,0.953
2025-04-21 23:14:33,545,272600,0.936,0.953
2025-04-21 23:14:35,550,275100,0.861,0.954
2025-04-21 23:14:38,555,277600,0.928,0.954
2025-04-21 23:14:40,560,280100,0.84,0.954
2025-04-21 23:14:43,565,282600,0.881,0.954
2025-04-21 23:14:45,570,285100,0.926,0.954
2025-04-21 23:14:48,575,287600,0.916,0.954
2025-04-21 23:14:50,580,290100,0.9,0.954
2025-04-21 23:14:52,585,292600,0.831,0.954
2025-04-21 23:14:55,590,295100,0.918,0.954
2025-04-21 23:14:57,595,297600,0.916,0.954
2025-04-21 23:15:00,600,300100,0.854,0.954
2025-04-21 23:15:02,605,302600,0.93,0.954
2025-04-21 23:15:05,610,305100,0.854,0.954
2025-04-21 23:15:07,615,307600,0.928,0.954
2025-04-21 23:15:09,620,310100,0.911,0.954
2025-04-21 23:15:12,625,312600,0.908,0.954
2025-04-21 23:15:14,630,315100,0.925,0.954
2025-04-21 23:15:17,635,317600,0.909,0.954
2025-04-21 23:15:19,640,320100,0.881,0.954
2025-04-21 23:15:21,645,322600,0.937,0.954
2025-04-21 23:15:24,650,325100,0.937,0.954
2025-04-21 23:15:26,655,327600,0.917,0.954
2025-04-21 23:15:29,660,330100,0.927,0.954
2025-04-21 23:15:31,665,332600,0.92,0.954
2025-04-21 23:15:33,670,335100,0.933,0.954
2025-04-21 23:15:36,675,337600,0.938,0.954
2025-04-21 23:15:38,680,340100,0.929,0.954
2025-04-21 23:15:41,685,342600,0.909,0.954
2025-04-21 23:15:43,690,345100,0.939,0.954
2025-04-21 23:15:46,695,347600,0.912,0.954
2025-04-21 23:15:48,700,350100,0.934,0.954
2025-04-21 23:15:50,705,352600,0.915,0.954
2025-04-21 23:15:53,710,355100,0.919,0.954
2025-04-21 23:15:55,715,357600,0.871,0.954
2025-04-21 23:15:58,720,360100,0.912,0.954
2025-04-21 23:16:00,725,362600,0.946,0.954
2025-04-21 23:16:02,730,365100,0.897,0.954
2025-04-21 23:16:05,735,367600,0.912,0.954
2025-04-21 23:16:07,740,370100,0.925,0.954
2025-04-21 23:16:10,745,372600,0.903,0.954
2025-04-21 23:16:12,750,375100,0.937,0.954
2025-04-21 23:16:14,755,377600,0.815,0.954
2025-04-21 23:16:17,760,380100,0.931,0.954
2025-04-21 23:16:19,765,382600,0.945,0.954
2025-04-21 23:16:22,770,385100,0.936,0.954
2025-04-21 23:16:24,775,387600,0.942,0.954
2025-04-21 23:16:26,780,390100,0.914,0.954
2025-04-21 23:16:29,785,392600,0.918,0.954
2025-04-21 23:16:31,790,395100,0.906,0.954
2025-04-21 23:16:34,795,397600,0.93,0.954
2025-04-21 23:16:36,800,400100,0.943,0.954
2025-04-21 23:16:38,805,402600,0.913,0.954
2025-04-21 23:16:41,810,405100,0.845,0.954
2025-04-21 23:16:43,815,407600,0.91,0.954
2025-04-21 23:16:46,820,410100,0.934,0.955
2025-04-21 23:16:48,825,412600,0.938,0.955
2025-04-21 23:16:50,830,415100,0.863,0.955
2025-04-21 23:16:53,835,417600,0.923,0.955
2025-04-21 23:16:55,840,420100,0.853,0.955
2025-04-21 23:16:58,845,422600,0.902,0.955
2025-04-21 23:17:00,850,425100,0.937,0.955
2025-04-21 23:17:02,855,427600,0.894,0.955
2025-04-21 23:17:05,860,430100,0.909,0.955
2025-04-21 23:17:07,865,432600,0.935,0.955
2025-04-21 23:17:10,870,435100,0.935,0.955
2025-04-21 23:17:12,875,437600,0.913,0.955
2025-04-21 23:17:14,880,440100,0.888,0.955
2025-04-21 23:17:17,885,442600,0.945,0.955
2025-04-21 23:17:19,890,445100,0.888,0.955
2025-04-21 23:17:22,895,447600,0.901,0.955
2025-04-21 23:17:24,900,450100,0.911,0.955
2025-04-21 23:17:26,905,452600,0.917,0.955
2025-04-21 23:17:29,910,455100,0.886,0.955
2025-04-21 23:17:31,915,457600,0.943,0.955
2025-04-21 23:17:34,920,460100,0.875,0.955
2025-04-21 23:17:36,925,462600,0.931,0.956
2025-04-21 23:17:38,930,465100,0.946,0.956
2025-04-21 23:17:41,935,467600,0.89,0.956
2025-04-21 23:17:43,940,470100,0.926,0.956
2025-04-21 23:17:46,945,472600,0.925,0.956
2025-04-21 23:17:48,950,475100,0.879,0.956
2025-04-21 23:17:50,955,477600,0.911,0.956
2025-04-21 23:17:53,960,480100,0.903,0.956
2025-04-21 23:17:55,965,482600,0.944,0.956
2025-04-21 23:17:58,970,485100,0.916,0.956
2025-04-21 23:18:00,975,487600,0.897,0.956
2025-04-21 23:18:02,980,490100,0.913,0.956
2025-04-21 23:18:05,985,492600,0.906,0.956
2025-04-21 23:18:07,990,495100,0.933,0.956
2025-04-21 23:18:10,995,497600,0.935,0.956
2025-04-21 23:18:12,1000,500100,0.91,0.956

Process finished with exit code 0


import random

from evol import Population
from PIL import Image, ImageDraw, ImageChops
from random import randint

POLYGON_COUNT=100
SIDES=3
MIN_SIDES = 3
MAX_SIDES = 6
#print(SIDES)

SHAPES = 100
MAX = 255 * 200 * 200
TARGET = Image.open("8a.png")
TARGET.load()


def get_random_pixel_color():
    x = randint(0, TARGET.width - 1)
    y = randint(0, TARGET.height - 1)

    return TARGET.getpixel((x, y))

def get_alpha():
    r = random.random()
    if r < 0.3:
        return randint(30, 100)
    elif r < 0.8:
        return randint(100, 200)
    else:
        return 255

def make_polygon():
    sides = randint(MIN_SIDES, MAX_SIDES)
    points = []

    # Create shape at the edge of the canvas
    if random.random() < 0.02:
        for _ in range(sides):
            points.append(0 if random.random() < 0.5 else 199)
            points.append(0 if random.random() < 0.5 else 199)

    # Create random
    for _ in range(sides):
        points.append(randint(0, 199))
        points.append(randint(0, 199))



    if random.random() < 0.7:
        color = list(get_random_pixel_color()[:3])
        color.append(255)


    else:
        base_color = get_random_pixel_color()
        color = [max(0, min(255, base + randint(-20, 20))) for base in base_color[:3]]
        color.append(get_alpha())



    return [tuple(points), tuple(color)]

##
def initialise():
    return [make_polygon() for i in range(POLYGON_COUNT)]

##
def draw(solution):
    image = Image.new("RGB", (200, 200))
    canvas = ImageDraw.Draw(image, "RGBA")
    for polygon in solution:
        canvas.polygon(polygon[0], fill=polygon[1])
    return image



def evolve(population, args):
    for i in range(5):
        population.survive(fraction=0.1)
        population.breed(parent_picker=fit_selection , combiner=combine)
        population.mutate(mutate_function=mutate, rate=0.2)
    return population


##
# Original - Random Selection
def select(population):
    mom = random.choice(population)
    print(mom.fitness)

    dad = random.choice(population)
    return mom, dad


def fit_selection(population):

    ten_parents = random.sample(population, 10)
    # Sort based on fitness
    ten_parents.sort(key=lambda fit_filter: fit_filter.fitness)
    #print(ten_parents[8], ten_parents[9])
    return ten_parents[8], ten_parents[9]


def combine(mom, dad):
    # 70% multi-point crossover, 30% uniform crossover
    if random.random() < 0.7:
        splits = sorted(random.sample(range(min(len(mom), len(dad))), 2))
        return mom[:splits[0]] + dad[splits[0]:splits[1]] + mom[splits[1]:]
    else:
        return [random.choice(pair) for pair in zip(mom, dad)]



def mutate(chromosome, rate):
    # 1. Focus only on these key mutation types
    mutation_type = random.choice([
        'modify_coords',
        'modify_color',
        'add_polygon',
        'remove_polygon'
    ])

    # Work on a copy
    mutated = list(chromosome)

    # 2. Targeted coordinate mutation
    if mutation_type == 'modify_coords' and mutated:
        idx = random.randrange(len(mutated))
        coords, color = mutated[idx]
        mutated[idx] = (
            tuple(
                max(0, min(199, c + int(random.gauss(0, 10))))
                for c in coords
            ),
            color
        )

    # 3. Targeted color mutation
    elif mutation_type == 'modify_color' and mutated:
        idx = random.randrange(len(mutated))
        coords, color = mutated[idx]
        mutated[idx] = (
            coords,
            tuple(
                max(0, min(255, c + int(random.gauss(0, 25))))
                if i < 3 else c  # Don't mutate alpha
                for i, c in enumerate(color)
            )
        )

    # 4. Structural changes
    elif mutation_type == 'add_polygon' and len(mutated) < POLYGON_COUNT * 1.5:
        mutated.insert(random.randrange(len(mutated) + 1), make_polygon())

    elif mutation_type == 'remove_polygon' and len(mutated) > POLYGON_COUNT // 2:
        mutated.pop(random.randrange(len(mutated)))

    return mutated