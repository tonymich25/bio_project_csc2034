2025-04-24 17:49:59,5,2600,0.738,0.838
2025-04-24 17:50:01,10,5100,0.765,0.857
2025-04-24 17:50:02,15,7600,0.849,0.87
2025-04-24 17:50:04,20,10100,0.857,0.89
2025-04-24 17:50:05,25,12600,0.843,0.905
2025-04-24 17:50:06,30,15100,0.902,0.913
2025-04-24 17:50:08,35,17600,0.902,0.918
2025-04-24 17:50:09,40,20100,0.9,0.923
2025-04-24 17:50:10,45,22600,0.859,0.926
2025-04-24 17:50:12,50,25100,0.823,0.927
2025-04-24 17:50:13,55,27600,0.91,0.929
2025-04-24 17:50:15,60,30100,0.898,0.93
2025-04-24 17:50:16,65,32600,0.892,0.932
2025-04-24 17:50:17,70,35100,0.89,0.935
2025-04-24 17:50:19,75,37600,0.913,0.935
2025-04-24 17:50:20,80,40100,0.901,0.935
2025-04-24 17:50:21,85,42600,0.892,0.936
2025-04-24 17:50:23,90,45100,0.864,0.936
2025-04-24 17:50:24,95,47600,0.863,0.936
2025-04-24 17:50:26,100,50100,0.812,0.936
2025-04-24 17:50:27,105,52600,0.915,0.936
2025-04-24 17:50:28,110,55100,0.908,0.936
2025-04-24 17:50:30,115,57600,0.886,0.936
2025-04-24 17:50:31,120,60100,0.913,0.937
2025-04-24 17:50:33,125,62600,0.909,0.937
2025-04-24 17:50:34,130,65100,0.904,0.937
2025-04-24 17:50:36,135,67600,0.896,0.937
2025-04-24 17:50:37,140,70100,0.884,0.937
2025-04-24 17:50:38,145,72600,0.906,0.937
2025-04-24 17:50:40,150,75100,0.906,0.938
2025-04-24 17:50:41,155,77600,0.894,0.938
2025-04-24 17:50:42,160,80100,0.897,0.939
2025-04-24 17:50:44,165,82600,0.907,0.939
2025-04-24 17:50:45,170,85100,0.895,0.939
2025-04-24 17:50:47,175,87600,0.797,0.939
2025-04-24 17:50:48,180,90100,0.904,0.939
2025-04-24 17:50:49,185,92600,0.914,0.939
2025-04-24 17:50:51,190,95100,0.908,0.939
2025-04-24 17:50:53,195,97600,0.83,0.939
2025-04-24 17:50:55,200,100100,0.91,0.939
2025-04-24 17:50:58,205,102600,0.905,0.939
2025-04-24 17:51:01,210,105100,0.902,0.939
2025-04-24 17:51:03,215,107600,0.871,0.939
2025-04-24 17:51:05,220,110100,0.747,0.939
2025-04-24 17:51:06,225,112600,0.9,0.939
2025-04-24 17:51:08,230,115100,0.912,0.94
2025-04-24 17:51:09,235,117600,0.855,0.94
2025-04-24 17:51:10,240,120100,0.921,0.94
2025-04-24 17:51:12,245,122600,0.905,0.94
2025-04-24 17:51:13,250,125100,0.86,0.94
2025-04-24 17:51:14,255,127600,0.896,0.94
2025-04-24 17:51:16,260,130100,0.845,0.94
2025-04-24 17:51:17,265,132600,0.923,0.94
2025-04-24 17:51:19,270,135100,0.892,0.94
2025-04-24 17:51:20,275,137600,0.792,0.94
2025-04-24 17:51:21,280,140100,0.747,0.94
2025-04-24 17:51:23,285,142600,0.907,0.94
2025-04-24 17:51:24,290,145100,0.844,0.94
2025-04-24 17:51:25,295,147600,0.931,0.94
2025-04-24 17:51:27,300,150100,0.883,0.94
2025-04-24 17:51:28,305,152600,0.843,0.94
2025-04-24 17:51:29,310,155100,0.893,0.94
2025-04-24 17:51:31,315,157600,0.908,0.94
2025-04-24 17:51:32,320,160100,0.908,0.94
2025-04-24 17:51:34,325,162600,0.821,0.94
2025-04-24 17:51:35,330,165100,0.865,0.94
2025-04-24 17:51:36,335,167600,0.88,0.941
2025-04-24 17:51:38,340,170100,0.905,0.941
2025-04-24 17:51:39,345,172600,0.91,0.941
2025-04-24 17:51:40,350,175100,0.91,0.941
2025-04-24 17:51:42,355,177600,0.909,0.941
2025-04-24 17:51:43,360,180100,0.926,0.941
2025-04-24 17:51:45,365,182600,0.913,0.941
2025-04-24 17:51:46,370,185100,0.866,0.942
2025-04-24 17:51:47,375,187600,0.857,0.942
2025-04-24 17:51:49,380,190100,0.914,0.942
2025-04-24 17:51:50,385,192600,0.872,0.942
2025-04-24 17:51:52,390,195100,0.891,0.942
2025-04-24 17:51:53,395,197600,0.881,0.942
2025-04-24 17:51:54,400,200100,0.838,0.942
2025-04-24 17:51:56,405,202600,0.894,0.942
2025-04-24 17:51:57,410,205100,0.879,0.943
2025-04-24 17:51:59,415,207600,0.901,0.943
2025-04-24 17:52:00,420,210100,0.847,0.943
2025-04-24 17:52:01,425,212600,0.84,0.943
2025-04-24 17:52:03,430,215100,0.919,0.943
2025-04-24 17:52:04,435,217600,0.893,0.943
2025-04-24 17:52:06,440,220100,0.88,0.943
2025-04-24 17:52:07,445,222600,0.894,0.944
2025-04-24 17:52:09,450,225100,0.89,0.944
2025-04-24 17:52:10,455,227600,0.884,0.944
2025-04-24 17:52:11,460,230100,0.854,0.944
2025-04-24 17:52:13,465,232600,0.861,0.944
2025-04-24 17:52:14,470,235100,0.899,0.944
2025-04-24 17:52:16,475,237600,0.834,0.944
2025-04-24 17:52:17,480,240100,0.921,0.944
2025-04-24 17:52:19,485,242600,0.862,0.944
2025-04-24 17:52:20,490,245100,0.903,0.944
2025-04-24 17:52:21,495,247600,0.926,0.944
2025-04-24 17:52:23,500,250100,0.9,0.944
2025-04-24 17:52:24,505,252600,0.908,0.944
2025-04-24 17:52:26,510,255100,0.89,0.944
2025-04-24 17:52:27,515,257600,0.894,0.944
2025-04-24 17:52:29,520,260100,0.931,0.944
2025-04-24 17:52:30,525,262600,0.874,0.944
2025-04-24 17:52:32,530,265100,0.912,0.944
2025-04-24 17:52:33,535,267600,0.879,0.944
2025-04-24 17:52:35,540,270100,0.866,0.944
2025-04-24 17:52:38,545,272600,0.893,0.944
2025-04-24 17:52:40,550,275100,0.9,0.944
2025-04-24 17:52:43,555,277600,0.879,0.945
2025-04-24 17:52:45,560,280100,0.917,0.945
2025-04-24 17:52:48,565,282600,0.861,0.945
2025-04-24 17:52:50,570,285100,0.862,0.945
2025-04-24 17:52:53,575,287600,0.922,0.945
2025-04-24 17:52:56,580,290100,0.911,0.945
2025-04-24 17:52:58,585,292600,0.912,0.945
2025-04-24 17:53:00,590,295100,0.838,0.945
2025-04-24 17:53:01,595,297600,0.909,0.945
2025-04-24 17:53:03,600,300100,0.876,0.945
2025-04-24 17:53:04,605,302600,0.896,0.945
2025-04-24 17:53:06,610,305100,0.932,0.945
2025-04-24 17:53:09,615,307600,0.886,0.945
2025-04-24 17:53:11,620,310100,0.866,0.945
2025-04-24 17:53:14,625,312600,0.903,0.945
2025-04-24 17:53:16,630,315100,0.825,0.945
2025-04-24 17:53:19,635,317600,0.917,0.945
2025-04-24 17:53:22,640,320100,0.938,0.945
2025-04-24 17:53:24,645,322600,0.934,0.946
2025-04-24 17:53:27,650,325100,0.907,0.946
2025-04-24 17:53:29,655,327600,0.913,0.946
2025-04-24 17:53:32,660,330100,0.829,0.946
2025-04-24 17:53:34,665,332600,0.914,0.946
2025-04-24 17:53:37,670,335100,0.912,0.946
2025-04-24 17:53:39,675,337600,0.91,0.947
2025-04-24 17:53:42,680,340100,0.894,0.947
2025-04-24 17:53:44,685,342600,0.9,0.947
2025-04-24 17:53:47,690,345100,0.914,0.947
2025-04-24 17:53:49,695,347600,0.86,0.947
2025-04-24 17:53:52,700,350100,0.906,0.947
2025-04-24 17:53:54,705,352600,0.787,0.947
2025-04-24 17:53:57,710,355100,0.926,0.948
2025-04-24 17:53:59,715,357600,0.863,0.948
2025-04-24 17:54:02,720,360100,0.785,0.95
2025-04-24 17:54:04,725,362600,0.918,0.95
2025-04-24 17:54:07,730,365100,0.892,0.95
2025-04-24 17:54:09,735,367600,0.912,0.95
2025-04-24 17:54:12,740,370100,0.87,0.95
2025-04-24 17:54:14,745,372600,0.902,0.95
2025-04-24 17:54:17,750,375100,0.91,0.95
2025-04-24 17:54:20,755,377600,0.891,0.951
2025-04-24 17:54:22,760,380100,0.844,0.951
2025-04-24 17:54:25,765,382600,0.866,0.951
2025-04-24 17:54:26,770,385100,0.939,0.951
2025-04-24 17:54:28,775,387600,0.929,0.951
2025-04-24 17:54:29,780,390100,0.895,0.951
2025-04-24 17:54:31,785,392600,0.928,0.951
2025-04-24 17:54:32,790,395100,0.861,0.951
2025-04-24 17:54:34,795,397600,0.923,0.951
2025-04-24 17:54:35,800,400100,0.919,0.951
2025-04-24 17:54:37,805,402600,0.916,0.951
2025-04-24 17:54:38,810,405100,0.871,0.951
2025-04-24 17:54:40,815,407600,0.882,0.951
2025-04-24 17:54:41,820,410100,0.9,0.951
2025-04-24 17:54:43,825,412600,0.903,0.951
2025-04-24 17:54:44,830,415100,0.888,0.951
2025-04-24 17:54:46,835,417600,0.924,0.951
2025-04-24 17:54:47,840,420100,0.878,0.951
2025-04-24 17:54:49,845,422600,0.857,0.951
2025-04-24 17:54:50,850,425100,0.889,0.951
2025-04-24 17:54:52,855,427600,0.914,0.951
2025-04-24 17:54:53,860,430100,0.939,0.951
2025-04-24 17:54:54,865,432600,0.947,0.951
2025-04-24 17:54:56,870,435100,0.876,0.951
2025-04-24 17:54:57,875,437600,0.869,0.951
2025-04-24 17:54:59,880,440100,0.861,0.951
2025-04-24 17:55:00,885,442600,0.904,0.952
2025-04-24 17:55:02,890,445100,0.839,0.952
2025-04-24 17:55:03,895,447600,0.881,0.952
2025-04-24 17:55:05,900,450100,0.888,0.952
2025-04-24 17:55:06,905,452600,0.91,0.952
2025-04-24 17:55:08,910,455100,0.863,0.952
2025-04-24 17:55:09,915,457600,0.883,0.952
2025-04-24 17:55:10,920,460100,0.909,0.952
2025-04-24 17:55:12,925,462600,0.873,0.952
2025-04-24 17:55:13,930,465100,0.89,0.952
2025-04-24 17:55:15,935,467600,0.94,0.952
2025-04-24 17:55:16,940,470100,0.853,0.952
2025-04-24 17:55:18,945,472600,0.9,0.952
2025-04-24 17:55:19,950,475100,0.868,0.952
2025-04-24 17:55:21,955,477600,0.912,0.952
2025-04-24 17:55:22,960,480100,0.923,0.952
2025-04-24 17:55:24,965,482600,0.886,0.952
2025-04-24 17:55:25,970,485100,0.832,0.952
2025-04-24 17:55:26,975,487600,0.925,0.952
2025-04-24 17:55:28,980,490100,0.912,0.952
2025-04-24 17:55:29,985,492600,0.895,0.952
2025-04-24 17:55:31,990,495100,0.898,0.952
2025-04-24 17:55:32,995,497600,0.901,0.952
2025-04-24 17:55:34,1000,500100,0.926,0.952



import random

from evol import Population
from PIL import Image, ImageDraw, ImageChops
from random import randint

POLYGON_COUNT=100
SIDES=3
MIN_SIDES = 3
MAX_SIDES = 6
POP_SURVIVAL = 0.1
MUTATION_RATE = 0.4

SHAPES = 100
MAX = 255 * 200 * 200
TARGET = Image.open("8a.png")
TARGET.load()


# At program start:
ALL_PIXELS = list(TARGET.getdata())

def get_random_pixel_color():
    return random.choice(ALL_PIXELS)

def get_alpha():
    r = random.random()
    if r < 0.3:
        return randint(30, 100)
    elif r < 0.8:
        return randint(100, 200)
    else:
        return 255

def make_polygon():
    sides = randint(MIN_SIDES, MAX_SIDES)
    points = []

    # Create shape at the edge of the canvas
    if random.random() < 0.02:
        for _ in range(sides):
            points.append(0 if random.random() < 0.5 else 199)
            points.append(0 if random.random() < 0.5 else 199)

    # Create random
    for _ in range(sides):
        points.append(randint(0, 199))
        points.append(randint(0, 199))


    if random.random() < 0.7:
        color = list(get_random_pixel_color()[:3])
        color.append(255)

    else:
        base_color = get_random_pixel_color()
        color = [max(0, min(255, base + randint(-20, 20))) for base in base_color[:3]]
        color.append(get_alpha())

    return [tuple(points), tuple(color)]

##
def initialise():
    return [make_polygon() for i in range(POLYGON_COUNT)]

##
def draw(solution):
    # 1. Create a blank white RGBA canvas (200x200 pixels)
    image = Image.new("RGBA", (200, 200), (0, 0, 0, 255))
    canvas = ImageDraw.Draw(image)

    # 2. Draw all polygons with proper transparency handling
    for polygon in solution:
        canvas.polygon(polygon[0], fill=polygon[1])  # Draw each shape

    # 3. Convert to RGB before returning (removes alpha channel)
    return image.convert("RGB")


def evolve(population, args):
    for i in range(5):
        population.survive(fraction=POP_SURVIVAL)
        population.breed(parent_picker=fit_selection , combiner=combine)
        population.mutate(mutate_function=mutate, rate=MUTATION_RATE)
    return population


##
# Original - Random Selection
def select(population):
    mom = random.choice(population)
    print(mom.fitness)

    dad = random.choice(population)
    return mom, dad


def fit_selection(population):

    ten_parents = random.sample(population, 10)
    # Sort based on fitness
    ten_parents.sort(key=lambda fit_filter: fit_filter.fitness)
    #print(ten_parents[8], ten_parents[9])
    return ten_parents[8], ten_parents[9]


def combine(mom, dad):
    # 70% multi-point crossover, 30% uniform crossover
    if random.random() < 0.7:
        splits = sorted(random.sample(range(min(len(mom), len(dad))), 2))
        return mom[:splits[0]] + dad[splits[0]:splits[1]] + mom[splits[1]:]
    else:
        return [random.choice(pair) for pair in zip(mom, dad)]



def mutate(chromosome, rate):
    # 1. Focus only on these key mutation types
    mutation_type = random.choice([
        'modify_coords',
        'modify_color',
        'add_polygon',
        'remove_polygon'
    ])

    # Work on a copy
    mutated = list(chromosome)

    # 2. Targeted coordinate mutation
    if mutation_type == 'modify_coords' and mutated:
        idx = random.randrange(len(mutated))
        coords, color = mutated[idx]
        mutated[idx] = (
            tuple(
                max(0, min(199, c + int(random.gauss(0, 10))))
                for c in coords
            ),
            color
        )

    # 3. Targeted color mutation
    elif mutation_type == 'modify_color' and mutated:
        idx = random.randrange(len(mutated))
        coords, color = mutated[idx]
        mutated[idx] = (
            coords,
            tuple(
                max(0, min(255, c + int(random.gauss(0, 25))))
                if i < 3 else c  # Don't mutate alpha
                for i, c in enumerate(color)
            )
        )

    # 4. Structural changes
    elif mutation_type == 'add_polygon' and len(mutated) < POLYGON_COUNT * 1.5:
        mutated.insert(random.randrange(len(mutated) + 1), make_polygon())

    elif mutation_type == 'remove_polygon' and len(mutated) > POLYGON_COUNT // 2:
        mutated.pop(random.randrange(len(mutated)))

    return mutated