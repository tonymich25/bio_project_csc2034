2025-04-21 22:55:06,5,2600,0.745,0.776
2025-04-21 22:55:07,10,5100,0.707,0.803
2025-04-21 22:55:09,15,7600,0.746,0.817
2025-04-21 22:55:11,20,10100,0.799,0.835
2025-04-21 22:55:12,25,12600,0.81,0.851
2025-04-21 22:55:14,30,15100,0.825,0.869
2025-04-21 22:55:16,35,17600,0.842,0.88
2025-04-21 22:55:17,40,20100,0.844,0.891
2025-04-21 22:55:19,45,22600,0.832,0.9
2025-04-21 22:55:21,50,25100,0.845,0.904
2025-04-21 22:55:23,55,27600,0.856,0.906
2025-04-21 22:55:25,60,30100,0.883,0.907
2025-04-21 22:55:26,65,32600,0.829,0.908
2025-04-21 22:55:27,70,35100,0.885,0.909
2025-04-21 22:55:29,75,37600,0.882,0.911
2025-04-21 22:55:30,80,40100,0.875,0.912
2025-04-21 22:55:32,85,42600,0.886,0.913
2025-04-21 22:55:34,90,45100,0.874,0.914
2025-04-21 22:55:36,95,47600,0.825,0.914
2025-04-21 22:55:38,100,50100,0.874,0.914
2025-04-21 22:55:39,105,52600,0.897,0.915
2025-04-21 22:55:41,110,55100,0.892,0.916
2025-04-21 22:55:42,115,57600,0.798,0.916
2025-04-21 22:55:43,120,60100,0.805,0.916
2025-04-21 22:55:44,125,62600,0.733,0.916
2025-04-21 22:55:46,130,65100,0.845,0.916
2025-04-21 22:55:47,135,67600,0.867,0.917
2025-04-21 22:55:48,140,70100,0.837,0.917
2025-04-21 22:55:49,145,72600,0.879,0.917
2025-04-21 22:55:51,150,75100,0.884,0.917
2025-04-21 22:55:52,155,77600,0.877,0.918
2025-04-21 22:55:53,160,80100,0.879,0.918
2025-04-21 22:55:54,165,82600,0.877,0.918
2025-04-21 22:55:56,170,85100,0.861,0.918
2025-04-21 22:55:57,175,87600,0.837,0.918
2025-04-21 22:55:58,180,90100,0.902,0.918
2025-04-21 22:56:00,185,92600,0.83,0.919
2025-04-21 22:56:01,190,95100,0.899,0.919
2025-04-21 22:56:02,195,97600,0.894,0.919
2025-04-21 22:56:03,200,100100,0.867,0.919
2025-04-21 22:56:05,205,102600,0.834,0.919
2025-04-21 22:56:06,210,105100,0.88,0.919
2025-04-21 22:56:07,215,107600,0.871,0.919
2025-04-21 22:56:08,220,110100,0.798,0.919
2025-04-21 22:56:09,225,112600,0.895,0.919
2025-04-21 22:56:11,230,115100,0.905,0.919
2025-04-21 22:56:12,235,117600,0.877,0.919
2025-04-21 22:56:13,240,120100,0.863,0.92
2025-04-21 22:56:14,245,122600,0.879,0.92
2025-04-21 22:56:16,250,125100,0.874,0.92
2025-04-21 22:56:17,255,127600,0.889,0.92
2025-04-21 22:56:18,260,130100,0.829,0.92
2025-04-21 22:56:19,265,132600,0.745,0.921
2025-04-21 22:56:21,270,135100,0.897,0.921
2025-04-21 22:56:22,275,137600,0.892,0.921
2025-04-21 22:56:23,280,140100,0.887,0.921
2025-04-21 22:56:24,285,142600,0.849,0.921
2025-04-21 22:56:26,290,145100,0.902,0.922
2025-04-21 22:56:27,295,147600,0.868,0.922
2025-04-21 22:56:28,300,150100,0.907,0.922
2025-04-21 22:56:29,305,152600,0.9,0.922
2025-04-21 22:56:31,310,155100,0.876,0.922
2025-04-21 22:56:32,315,157600,0.895,0.922
2025-04-21 22:56:33,320,160100,0.909,0.922
2025-04-21 22:56:35,325,162600,0.873,0.922
2025-04-21 22:56:36,330,165100,0.892,0.922
2025-04-21 22:56:37,335,167600,0.871,0.922
2025-04-21 22:56:38,340,170100,0.899,0.923
2025-04-21 22:56:40,345,172600,0.872,0.923
2025-04-21 22:56:41,350,175100,0.882,0.923
2025-04-21 22:56:42,355,177600,0.897,0.923
2025-04-21 22:56:43,360,180100,0.904,0.923
2025-04-21 22:56:45,365,182600,0.883,0.923
2025-04-21 22:56:46,370,185100,0.898,0.923
2025-04-21 22:56:47,375,187600,0.891,0.923
2025-04-21 22:56:48,380,190100,0.859,0.923
2025-04-21 22:56:49,385,192600,0.89,0.923
2025-04-21 22:56:51,390,195100,0.88,0.923
2025-04-21 22:56:52,395,197600,0.887,0.923
2025-04-21 22:56:53,400,200100,0.882,0.923
2025-04-21 22:56:54,405,202600,0.852,0.923
2025-04-21 22:56:56,410,205100,0.827,0.923
2025-04-21 22:56:57,415,207600,0.896,0.923
2025-04-21 22:56:58,420,210100,0.875,0.924
2025-04-21 22:57:00,425,212600,0.902,0.924
2025-04-21 22:57:01,430,215100,0.868,0.924
2025-04-21 22:57:02,435,217600,0.78,0.924
2025-04-21 22:57:03,440,220100,0.833,0.924
2025-04-21 22:57:05,445,222600,0.868,0.924
2025-04-21 22:57:06,450,225100,0.871,0.924
2025-04-21 22:57:07,455,227600,0.897,0.924
2025-04-21 22:57:08,460,230100,0.873,0.924
2025-04-21 22:57:10,465,232600,0.904,0.924
2025-04-21 22:57:11,470,235100,0.856,0.924
2025-04-21 22:57:12,475,237600,0.833,0.924
2025-04-21 22:57:14,480,240100,0.864,0.924
2025-04-21 22:57:15,485,242600,0.897,0.924
2025-04-21 22:57:16,490,245100,0.882,0.924
2025-04-21 22:57:17,495,247600,0.886,0.924
2025-04-21 22:57:19,500,250100,0.893,0.924
2025-04-21 22:57:20,505,252600,0.811,0.924
2025-04-21 22:57:21,510,255100,0.845,0.924
2025-04-21 22:57:22,515,257600,0.888,0.924
2025-04-21 22:57:24,520,260100,0.86,0.924
2025-04-21 22:57:25,525,262600,0.9,0.924
2025-04-21 22:57:26,530,265100,0.905,0.924
2025-04-21 22:57:28,535,267600,0.894,0.924
2025-04-21 22:57:29,540,270100,0.9,0.924
2025-04-21 22:57:30,545,272600,0.873,0.924
2025-04-21 22:57:31,550,275100,0.878,0.924
2025-04-21 22:57:33,555,277600,0.898,0.925
2025-04-21 22:57:34,560,280100,0.881,0.925
2025-04-21 22:57:35,565,282600,0.791,0.925
2025-04-21 22:57:37,570,285100,0.871,0.925
2025-04-21 22:57:38,575,287600,0.884,0.925
2025-04-21 22:57:39,580,290100,0.865,0.925
2025-04-21 22:57:40,585,292600,0.897,0.925
2025-04-21 22:57:42,590,295100,0.894,0.925
2025-04-21 22:57:43,595,297600,0.888,0.925
2025-04-21 22:57:44,600,300100,0.893,0.925
2025-04-21 22:57:46,605,302600,0.888,0.925
2025-04-21 22:57:47,610,305100,0.889,0.925
2025-04-21 22:57:48,615,307600,0.887,0.925
2025-04-21 22:57:49,620,310100,0.863,0.925
2025-04-21 22:57:51,625,312600,0.909,0.925
2025-04-21 22:57:52,630,315100,0.9,0.925
2025-04-21 22:57:53,635,317600,0.894,0.925
2025-04-21 22:57:55,640,320100,0.866,0.925
2025-04-21 22:57:56,645,322600,0.863,0.925
2025-04-21 22:57:57,650,325100,0.911,0.925
2025-04-21 22:57:58,655,327600,0.883,0.926
2025-04-21 22:58:00,660,330100,0.9,0.926
2025-04-21 22:58:01,665,332600,0.894,0.926
2025-04-21 22:58:02,670,335100,0.867,0.926
2025-04-21 22:58:04,675,337600,0.823,0.926
2025-04-21 22:58:05,680,340100,0.866,0.926
2025-04-21 22:58:06,685,342600,0.907,0.926
2025-04-21 22:58:08,690,345100,0.871,0.926
2025-04-21 22:58:09,695,347600,0.893,0.926
2025-04-21 22:58:10,700,350100,0.886,0.926
2025-04-21 22:58:11,705,352600,0.889,0.926
2025-04-21 22:58:13,710,355100,0.836,0.926
2025-04-21 22:58:14,715,357600,0.886,0.926
2025-04-21 22:58:15,720,360100,0.809,0.926
2025-04-21 22:58:17,725,362600,0.894,0.926
2025-04-21 22:58:18,730,365100,0.836,0.926
2025-04-21 22:58:19,735,367600,0.806,0.926
2025-04-21 22:58:21,740,370100,0.866,0.926
2025-04-21 22:58:22,745,372600,0.895,0.926
2025-04-21 22:58:23,750,375100,0.908,0.926
2025-04-21 22:58:24,755,377600,0.888,0.926
2025-04-21 22:58:26,760,380100,0.907,0.927
2025-04-21 22:58:27,765,382600,0.892,0.928
2025-04-21 22:58:28,770,385100,0.854,0.928
2025-04-21 22:58:30,775,387600,0.878,0.928
2025-04-21 22:58:31,780,390100,0.881,0.928
2025-04-21 22:58:32,785,392600,0.889,0.928
2025-04-21 22:58:34,790,395100,0.888,0.928
2025-04-21 22:58:35,795,397600,0.861,0.929
2025-04-21 22:58:36,800,400100,0.769,0.929
2025-04-21 22:58:38,805,402600,0.882,0.929
2025-04-21 22:58:39,810,405100,0.896,0.929
2025-04-21 22:58:40,815,407600,0.907,0.929
2025-04-21 22:58:42,820,410100,0.901,0.929
2025-04-21 22:58:43,825,412600,0.901,0.929
2025-04-21 22:58:44,830,415100,0.867,0.929
2025-04-21 22:58:45,835,417600,0.879,0.929
2025-04-21 22:58:47,840,420100,0.827,0.929
2025-04-21 22:58:48,845,422600,0.909,0.929
2025-04-21 22:58:49,850,425100,0.904,0.929
2025-04-21 22:58:50,855,427600,0.889,0.929
2025-04-21 22:58:52,860,430100,0.889,0.929
2025-04-21 22:58:53,865,432600,0.918,0.929
2025-04-21 22:58:55,870,435100,0.896,0.929
2025-04-21 22:58:56,875,437600,0.904,0.929
2025-04-21 22:58:57,880,440100,0.883,0.929
2025-04-21 22:58:59,885,442600,0.889,0.929
2025-04-21 22:59:00,890,445100,0.903,0.929
2025-04-21 22:59:01,895,447600,0.882,0.929
2025-04-21 22:59:03,900,450100,0.908,0.929
2025-04-21 22:59:04,905,452600,0.853,0.929
2025-04-21 22:59:05,910,455100,0.885,0.93
2025-04-21 22:59:07,915,457600,0.85,0.93
2025-04-21 22:59:08,920,460100,0.884,0.93
2025-04-21 22:59:09,925,462600,0.907,0.93
2025-04-21 22:59:11,930,465100,0.908,0.93
2025-04-21 22:59:12,935,467600,0.873,0.93
2025-04-21 22:59:13,940,470100,0.873,0.93
2025-04-21 22:59:15,945,472600,0.827,0.93
2025-04-21 22:59:16,950,475100,0.887,0.93
2025-04-21 22:59:17,955,477600,0.875,0.93
2025-04-21 22:59:19,960,480100,0.896,0.93
2025-04-21 22:59:20,965,482600,0.876,0.93
2025-04-21 22:59:21,970,485100,0.905,0.93
2025-04-21 22:59:23,975,487600,0.855,0.93
2025-04-21 22:59:24,980,490100,0.904,0.93
2025-04-21 22:59:25,985,492600,0.857,0.93
2025-04-21 22:59:27,990,495100,0.92,0.93
2025-04-21 22:59:28,995,497600,0.876,0.93
2025-04-21 22:59:30,1000,500100,0.829,0.93



import random

from evol import Population
from PIL import Image, ImageDraw, ImageChops
from random import randint

POLYGON_COUNT=100
SIDES=3
MIN_SIDES = 3
MAX_SIDES = 6
#print(SIDES)

SHAPES = 100
MAX = 255 * 200 * 200
TARGET = Image.open("8a.png")
TARGET.load()


def get_random_pixel_color():
    x = randint(0, TARGET.width - 1)
    y = randint(0, TARGET.height - 1)

    return TARGET.getpixel((x, y))

def get_alpha():
    r = random.random()
    if r < 0.3:
        return randint(30, 100)
    elif r < 0.8:
        return randint(100, 200)
    else:
        return 255

def make_polygon():
    sides = randint(MIN_SIDES, MAX_SIDES)
    points = []

    # Create shape at the edge of the canvas
    if random.random() < 0.02:
        for _ in range(sides):
            points.append(0 if random.random() < 0.5 else 199)
            points.append(0 if random.random() < 0.5 else 199)

    # Create random
    for _ in range(sides):
        points.append(randint(0, 199))
        points.append(randint(0, 199))



    if random.random() < 0.7:
        color = list(get_random_pixel_color()[:3])
        color.append(255)


    else:
        base_color = get_random_pixel_color()
        color = [max(0, min(255, base + randint(-20, 20))) for base in base_color[:3]]
        color.append(get_alpha())



    return [tuple(points), tuple(color)]

##
def initialise():
    return [make_polygon() for i in range(POLYGON_COUNT)]

##
def draw(solution):
    # Create image with white background (helps some target images)
    image = Image.new("RGBA", (200, 200), (255, 255, 255, 255))
    canvas = ImageDraw.Draw(image)

    # Draw all polygons at once using bulk operations
    for polygon in solution:
        canvas.polygon(polygon[0], fill=polygon[1])

    # Convert to RGB if needed (small performance gain)
    return image.convert("RGB") if image.mode == 'RGBA' else image



def evolve(population, args):
    for i in range(5):
        population.survive(fraction=0.1)
        population.breed(parent_picker=fit_selection , combiner=combine)
        population.mutate(mutate_function=mutate, rate=0.2)
    return population


##
# Original - Random Selection
def select(population):
    mom = random.choice(population)
    print(mom.fitness)

    dad = random.choice(population)
    return mom, dad


def fit_selection(population):

    ten_parents = random.sample(population, 10)
    # Sort based on fitness
    ten_parents.sort(key=lambda fit_filter: fit_filter.fitness)
    #print(ten_parents[8], ten_parents[9])
    return ten_parents[8], ten_parents[9]


def combine(mom, dad):
    # 70% multi-point crossover, 30% uniform crossover
    if random.random() < 0.7:
        splits = sorted(random.sample(range(min(len(mom), len(dad))), 2))
        return mom[:splits[0]] + dad[splits[0]:splits[1]] + mom[splits[1]:]
    else:
        return [random.choice(pair) for pair in zip(mom, dad)]



def mutate(chromosome, rate):
    # 1. Focus only on these key mutation types
    mutation_type = random.choice([
        'modify_coords',
        'modify_color',
        'add_polygon',
        'remove_polygon'
    ])

    # Work on a copy
    mutated = list(chromosome)

    # 2. Targeted coordinate mutation
    if mutation_type == 'modify_coords' and mutated:
        idx = random.randrange(len(mutated))
        coords, color = mutated[idx]
        mutated[idx] = (
            tuple(
                max(0, min(199, c + int(random.gauss(0, 10))))
                for c in coords
            ),
            color
        )

    # 3. Targeted color mutation
    elif mutation_type == 'modify_color' and mutated:
        idx = random.randrange(len(mutated))
        coords, color = mutated[idx]
        mutated[idx] = (
            coords,
            tuple(
                max(0, min(255, c + int(random.gauss(0, 25))))
                if i < 3 else c  # Don't mutate alpha
                for i, c in enumerate(color)
            )
        )

    # 4. Structural changes
    elif mutation_type == 'add_polygon' and len(mutated) < POLYGON_COUNT * 1.5:
        mutated.insert(random.randrange(len(mutated) + 1), make_polygon())

    elif mutation_type == 'remove_polygon' and len(mutated) > POLYGON_COUNT // 2:
        mutated.pop(random.randrange(len(mutated)))

    return mutated