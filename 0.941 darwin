2025-04-21 23:00:57,5,2600,0.554,0.854
2025-04-21 23:00:59,10,5100,0.821,0.88
2025-04-21 23:01:01,15,7600,0.813,0.892
2025-04-21 23:01:02,20,10100,0.877,0.899
2025-04-21 23:01:04,25,12600,0.85,0.907
2025-04-21 23:01:05,30,15100,0.876,0.911
2025-04-21 23:01:07,35,17600,0.86,0.912
2025-04-21 23:01:08,40,20100,0.855,0.916
2025-04-21 23:01:10,45,22600,0.902,0.918
2025-04-21 23:01:11,50,25100,0.876,0.919
2025-04-21 23:01:13,55,27600,0.901,0.92
2025-04-21 23:01:14,60,30100,0.817,0.92
2025-04-21 23:01:16,65,32600,0.895,0.922
2025-04-21 23:01:17,70,35100,0.881,0.923
2025-04-21 23:01:19,75,37600,0.865,0.925
2025-04-21 23:01:21,80,40100,0.895,0.925
2025-04-21 23:01:22,85,42600,0.895,0.925
2025-04-21 23:01:24,90,45100,0.877,0.926
2025-04-21 23:01:25,95,47600,0.706,0.927
2025-04-21 23:01:27,100,50100,0.891,0.928
2025-04-21 23:01:29,105,52600,0.872,0.928
2025-04-21 23:01:30,110,55100,0.899,0.929
2025-04-21 23:01:32,115,57600,0.85,0.929
2025-04-21 23:01:33,120,60100,0.898,0.929
2025-04-21 23:01:35,125,62600,0.901,0.93
2025-04-21 23:01:36,130,65100,0.871,0.931
2025-04-21 23:01:38,135,67600,0.904,0.931
2025-04-21 23:01:40,140,70100,0.897,0.931
2025-04-21 23:01:41,145,72600,0.758,0.932
2025-04-21 23:01:43,150,75100,0.902,0.932
2025-04-21 23:01:44,155,77600,0.913,0.932
2025-04-21 23:01:46,160,80100,0.912,0.932
2025-04-21 23:01:47,165,82600,0.872,0.933
2025-04-21 23:01:49,170,85100,0.832,0.933
2025-04-21 23:01:51,175,87600,0.876,0.933
2025-04-21 23:01:52,180,90100,0.836,0.933
2025-04-21 23:01:54,185,92600,0.913,0.933
2025-04-21 23:01:55,190,95100,0.828,0.933
2025-04-21 23:01:57,195,97600,0.861,0.933
2025-04-21 23:01:59,200,100100,0.857,0.934
2025-04-21 23:02:00,205,102600,0.861,0.934
2025-04-21 23:02:02,210,105100,0.875,0.934
2025-04-21 23:02:03,215,107600,0.858,0.934
2025-04-21 23:02:05,220,110100,0.83,0.934
2025-04-21 23:02:06,225,112600,0.9,0.934
2025-04-21 23:02:08,230,115100,0.889,0.934
2025-04-21 23:02:10,235,117600,0.873,0.934
2025-04-21 23:02:13,240,120100,0.91,0.934
2025-04-21 23:02:15,245,122600,0.877,0.935
2025-04-21 23:02:17,250,125100,0.874,0.935
2025-04-21 23:02:20,255,127600,0.862,0.935
2025-04-21 23:02:22,260,130100,0.597,0.935
2025-04-21 23:02:25,265,132600,0.865,0.935
2025-04-21 23:02:27,270,135100,0.876,0.936
2025-04-21 23:02:30,275,137600,0.89,0.936
2025-04-21 23:02:31,280,140100,0.903,0.936
2025-04-21 23:02:34,285,142600,0.883,0.936
2025-04-21 23:02:36,290,145100,0.878,0.936
2025-04-21 23:02:39,295,147600,0.831,0.936
2025-04-21 23:02:41,300,150100,0.919,0.936
2025-04-21 23:02:44,305,152600,0.9,0.936
2025-04-21 23:02:46,310,155100,0.898,0.936
2025-04-21 23:02:48,315,157600,0.901,0.936
2025-04-21 23:02:51,320,160100,0.864,0.936
2025-04-21 23:02:53,325,162600,0.911,0.936
2025-04-21 23:02:55,330,165100,0.906,0.936
2025-04-21 23:02:57,335,167600,0.913,0.936
2025-04-21 23:02:59,340,170100,0.891,0.936
2025-04-21 23:03:01,345,172600,0.845,0.936
2025-04-21 23:03:02,350,175100,0.848,0.936
2025-04-21 23:03:04,355,177600,0.908,0.936
2025-04-21 23:03:05,360,180100,0.891,0.936
2025-04-21 23:03:07,365,182600,0.913,0.937
2025-04-21 23:03:09,370,185100,0.915,0.937
2025-04-21 23:03:10,375,187600,0.895,0.937
2025-04-21 23:03:12,380,190100,0.919,0.937
2025-04-21 23:03:14,385,192600,0.903,0.937
2025-04-21 23:03:15,390,195100,0.902,0.937
2025-04-21 23:03:17,395,197600,0.884,0.937
2025-04-21 23:03:18,400,200100,0.902,0.937
2025-04-21 23:03:20,405,202600,0.897,0.937
2025-04-21 23:03:22,410,205100,0.932,0.937
2025-04-21 23:03:23,415,207600,0.884,0.937
2025-04-21 23:03:25,420,210100,0.888,0.937
2025-04-21 23:03:27,425,212600,0.852,0.937
2025-04-21 23:03:28,430,215100,0.899,0.937
2025-04-21 23:03:30,435,217600,0.889,0.937
2025-04-21 23:03:31,440,220100,0.857,0.937
2025-04-21 23:03:33,445,222600,0.862,0.937
2025-04-21 23:03:35,450,225100,0.892,0.937
2025-04-21 23:03:36,455,227600,0.892,0.937
2025-04-21 23:03:38,460,230100,0.866,0.937
2025-04-21 23:03:39,465,232600,0.847,0.937
2025-04-21 23:03:41,470,235100,0.896,0.937
2025-04-21 23:03:43,475,237600,0.89,0.937
2025-04-21 23:03:44,480,240100,0.918,0.937
2025-04-21 23:03:46,485,242600,0.928,0.937
2025-04-21 23:03:48,490,245100,0.88,0.937
2025-04-21 23:03:51,495,247600,0.866,0.937
2025-04-21 23:03:53,500,250100,0.867,0.937
2025-04-21 23:03:56,505,252600,0.909,0.937
2025-04-21 23:03:59,510,255100,0.913,0.937
2025-04-21 23:04:01,515,257600,0.878,0.937
2025-04-21 23:04:02,520,260100,0.926,0.937
2025-04-21 23:04:04,525,262600,0.906,0.937
2025-04-21 23:04:05,530,265100,0.885,0.937
2025-04-21 23:04:07,535,267600,0.879,0.937
2025-04-21 23:04:09,540,270100,0.929,0.938
2025-04-21 23:04:10,545,272600,0.897,0.938
2025-04-21 23:04:12,550,275100,0.817,0.938
2025-04-21 23:04:13,555,277600,0.876,0.938
2025-04-21 23:04:15,560,280100,0.87,0.938
2025-04-21 23:04:17,565,282600,0.708,0.938
2025-04-21 23:04:18,570,285100,0.885,0.938
2025-04-21 23:04:20,575,287600,0.881,0.938
2025-04-21 23:04:21,580,290100,0.892,0.938
2025-04-21 23:04:23,585,292600,0.876,0.938
2025-04-21 23:04:24,590,295100,0.917,0.938
2025-04-21 23:04:26,595,297600,0.892,0.938
2025-04-21 23:04:28,600,300100,0.921,0.938
2025-04-21 23:04:29,605,302600,0.883,0.938
2025-04-21 23:04:31,610,305100,0.851,0.938
2025-04-21 23:04:32,615,307600,0.835,0.938
2025-04-21 23:04:34,620,310100,0.865,0.938
2025-04-21 23:04:36,625,312600,0.901,0.938
2025-04-21 23:04:37,630,315100,0.899,0.938
2025-04-21 23:04:39,635,317600,0.875,0.938
2025-04-21 23:04:40,640,320100,0.87,0.938
2025-04-21 23:04:42,645,322600,0.899,0.938
2025-04-21 23:04:43,650,325100,0.898,0.938
2025-04-21 23:04:45,655,327600,0.913,0.938
2025-04-21 23:04:47,660,330100,0.885,0.938
2025-04-21 23:04:48,665,332600,0.881,0.938
2025-04-21 23:04:50,670,335100,0.917,0.938
2025-04-21 23:04:51,675,337600,0.884,0.938
2025-04-21 23:04:53,680,340100,0.893,0.938
2025-04-21 23:04:55,685,342600,0.89,0.938
2025-04-21 23:04:56,690,345100,0.868,0.938
2025-04-21 23:04:58,695,347600,0.883,0.938
2025-04-21 23:04:59,700,350100,0.888,0.938
2025-04-21 23:05:01,705,352600,0.847,0.938
2025-04-21 23:05:02,710,355100,0.9,0.938
2025-04-21 23:05:04,715,357600,0.903,0.938
2025-04-21 23:05:06,720,360100,0.857,0.938
2025-04-21 23:05:07,725,362600,0.869,0.938
2025-04-21 23:05:09,730,365100,0.913,0.938
2025-04-21 23:05:10,735,367600,0.73,0.938
2025-04-21 23:05:12,740,370100,0.919,0.939
2025-04-21 23:05:13,745,372600,0.892,0.939
2025-04-21 23:05:15,750,375100,0.87,0.939
2025-04-21 23:05:17,755,377600,0.848,0.939
2025-04-21 23:05:18,760,380100,0.78,0.939
2025-04-21 23:05:20,765,382600,0.923,0.939
2025-04-21 23:05:21,770,385100,0.897,0.939
2025-04-21 23:05:23,775,387600,0.909,0.939
2025-04-21 23:05:24,780,390100,0.811,0.939
2025-04-21 23:05:26,785,392600,0.923,0.939
2025-04-21 23:05:28,790,395100,0.877,0.939
2025-04-21 23:05:29,795,397600,0.89,0.939
2025-04-21 23:05:31,800,400100,0.901,0.939
2025-04-21 23:05:32,805,402600,0.879,0.939
2025-04-21 23:05:34,810,405100,0.902,0.939
2025-04-21 23:05:36,815,407600,0.882,0.939
2025-04-21 23:05:37,820,410100,0.893,0.939
2025-04-21 23:05:39,825,412600,0.908,0.939
2025-04-21 23:05:41,830,415100,0.9,0.939
2025-04-21 23:05:42,835,417600,0.909,0.939
2025-04-21 23:05:44,840,420100,0.879,0.939
2025-04-21 23:05:45,845,422600,0.888,0.939
2025-04-21 23:05:47,850,425100,0.909,0.94
2025-04-21 23:05:49,855,427600,0.844,0.94
2025-04-21 23:05:50,860,430100,0.932,0.94
2025-04-21 23:05:52,865,432600,0.891,0.94
2025-04-21 23:05:53,870,435100,0.895,0.94
2025-04-21 23:05:55,875,437600,0.902,0.94
2025-04-21 23:05:57,880,440100,0.926,0.94
2025-04-21 23:05:58,885,442600,0.897,0.94
2025-04-21 23:06:00,890,445100,0.768,0.94
2025-04-21 23:06:02,895,447600,0.909,0.94
2025-04-21 23:06:04,900,450100,0.917,0.94
2025-04-21 23:06:05,905,452600,0.866,0.94
2025-04-21 23:06:07,910,455100,0.861,0.94
2025-04-21 23:06:09,915,457600,0.904,0.94
2025-04-21 23:06:10,920,460100,0.895,0.94
2025-04-21 23:06:12,925,462600,0.888,0.94
2025-04-21 23:06:14,930,465100,0.902,0.94
2025-04-21 23:06:15,935,467600,0.893,0.94
2025-04-21 23:06:17,940,470100,0.913,0.941
2025-04-21 23:06:19,945,472600,0.89,0.941
2025-04-21 23:06:20,950,475100,0.77,0.941
2025-04-21 23:06:22,955,477600,0.884,0.941
2025-04-21 23:06:23,960,480100,0.918,0.941
2025-04-21 23:06:25,965,482600,0.907,0.941
2025-04-21 23:06:27,970,485100,0.884,0.941
2025-04-21 23:06:28,975,487600,0.839,0.941
2025-04-21 23:06:30,980,490100,0.904,0.941
2025-04-21 23:06:32,985,492600,0.908,0.941
2025-04-21 23:06:33,990,495100,0.936,0.941
2025-04-21 23:06:35,995,497600,0.926,0.941
2025-04-21 23:06:37,1000,500100,0.923,0.941


import random

from evol import Population
from PIL import Image, ImageDraw, ImageChops
from random import randint

POLYGON_COUNT=100
SIDES=3
MIN_SIDES = 3
MAX_SIDES = 6
#print(SIDES)

SHAPES = 100
MAX = 255 * 200 * 200
TARGET = Image.open("8a.png")
TARGET.load()


def get_random_pixel_color():
    x = randint(0, TARGET.width - 1)
    y = randint(0, TARGET.height - 1)

    return TARGET.getpixel((x, y))

def get_alpha():
    r = random.random()
    if r < 0.3:
        return randint(30, 100)
    elif r < 0.8:
        return randint(100, 200)
    else:
        return 255

def make_polygon():
    sides = randint(MIN_SIDES, MAX_SIDES)
    points = []

    # Create shape at the edge of the canvas
    if random.random() < 0.02:
        for _ in range(sides):
            points.append(0 if random.random() < 0.5 else 199)
            points.append(0 if random.random() < 0.5 else 199)

    # Create random
    for _ in range(sides):
        points.append(randint(0, 199))
        points.append(randint(0, 199))



    if random.random() < 0.7:
        color = list(get_random_pixel_color()[:3])
        color.append(255)


    else:
        base_color = get_random_pixel_color()
        color = [max(0, min(255, base + randint(-20, 20))) for base in base_color[:3]]
        color.append(get_alpha())



    return [tuple(points), tuple(color)]

##
def initialise():
    return [make_polygon() for i in range(POLYGON_COUNT)]

##
def draw(solution):
    # Create image with white background (helps some target images)
    image = Image.new("RGBA", (200, 200), (255, 255, 255, 255))
    canvas = ImageDraw.Draw(image)

    # Draw all polygons at once using bulk operations
    for polygon in solution:
        canvas.polygon(polygon[0], fill=polygon[1])

    # Convert to RGB if needed (small performance gain)
    return image.convert("RGB") if image.mode == 'RGBA' else image



def evolve(population, args):
    for i in range(5):
        population.survive(fraction=0.1)
        population.breed(parent_picker=fit_selection , combiner=combine)
        population.mutate(mutate_function=mutate, rate=0.2)
    return population


##
# Original - Random Selection
def select(population):
    mom = random.choice(population)
    print(mom.fitness)

    dad = random.choice(population)
    return mom, dad


def fit_selection(population):

    ten_parents = random.sample(population, 10)
    # Sort based on fitness
    ten_parents.sort(key=lambda fit_filter: fit_filter.fitness)
    #print(ten_parents[8], ten_parents[9])
    return ten_parents[8], ten_parents[9]


def combine(mom, dad):
    # 70% multi-point crossover, 30% uniform crossover
    if random.random() < 0.7:
        splits = sorted(random.sample(range(min(len(mom), len(dad))), 2))
        return mom[:splits[0]] + dad[splits[0]:splits[1]] + mom[splits[1]:]
    else:
        return [random.choice(pair) for pair in zip(mom, dad)]



def mutate(chromosome, rate):
    # 1. Focus only on these key mutation types
    mutation_type = random.choice([
        'modify_coords',
        'modify_color',
        'add_polygon',
        'remove_polygon'
    ])

    # Work on a copy
    mutated = list(chromosome)

    # 2. Targeted coordinate mutation
    if mutation_type == 'modify_coords' and mutated:
        idx = random.randrange(len(mutated))
        coords, color = mutated[idx]
        mutated[idx] = (
            tuple(
                max(0, min(199, c + int(random.gauss(0, 10))))
                for c in coords
            ),
            color
        )

    # 3. Targeted color mutation
    elif mutation_type == 'modify_color' and mutated:
        idx = random.randrange(len(mutated))
        coords, color = mutated[idx]
        mutated[idx] = (
            coords,
            tuple(
                max(0, min(255, c + int(random.gauss(0, 25))))
                if i < 3 else c  # Don't mutate alpha
                for i, c in enumerate(color)
            )
        )

    # 4. Structural changes
    elif mutation_type == 'add_polygon' and len(mutated) < POLYGON_COUNT * 1.5:
        mutated.insert(random.randrange(len(mutated) + 1), make_polygon())

    elif mutation_type == 'remove_polygon' and len(mutated) > POLYGON_COUNT // 2:
        mutated.pop(random.randrange(len(mutated)))

    return mutated